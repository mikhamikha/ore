#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#include "AT91RM9200.h"
#include "AT91RM9200_SYS.h"

AT91PS_SYS pSYS = NULL;

#define MAP_SIZE 4096UL

//----------------------------------------------------------------------------
int gpio_init() {
  int fd;

  if((fd = open("/dev/mem", O_RDWR | O_SYNC)) == -1){
    printf("gpio: Error opening /dev/mem\n");
    return -1;
  }

  // Map one page
  pSYS = (AT91PS_SYS)mmap(0, MAP_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, AT91C_BASE_SYS);
  if(pSYS == (AT91PS_SYS)-1){
    printf("gpio: Error mapping memory\n");
    close(fd);
    return -1;
  }

  close(fd);
  return 0;
}

//----------------------------------------------------------------------------
int Interface_Segment( int Interface, int pin1, int pin2, int pin3, int pin4, int res ) {
  unsigned int GP_Set, GP_Clear, GP_Input;

  GP_Set   = 0;
  GP_Clear = 0;
  GP_Input = 0;

  if (pin1 > 1) GP_Input += AT91C_PIO_PB6;
  else
    if (pin1) GP_Set   += AT91C_PIO_PB6;
    else      GP_Clear += AT91C_PIO_PB6;

  if (pin2 > 1) GP_Input += AT91C_PIO_PB7;
  else
    if (pin2) GP_Set   += AT91C_PIO_PB7;
    else      GP_Clear += AT91C_PIO_PB7;

  if (pin3 > 1) GP_Input += AT91C_PIO_PB8;
  else
    if (pin3) GP_Set   += AT91C_PIO_PB8;
    else      GP_Clear += AT91C_PIO_PB8;

  if (pin4 > 1) GP_Input += AT91C_PIO_PB9;
  else
    if (pin4) GP_Set   += AT91C_PIO_PB9;
    else      GP_Clear += AT91C_PIO_PB9;

  if (res > 1) GP_Input += AT91C_PIO_PB11;
  else
    if (res) GP_Set   += AT91C_PIO_PB11;
    else     GP_Clear += AT91C_PIO_PB11;

  if (Interface == 3) {
    GP_Set   = GP_Set << 6;
    GP_Clear = GP_Clear << 6;
  }

  printf("GP_Set   = 0x%08X\n", GP_Set);
  printf("GP_Clear = 0x%08X\n", GP_Clear);
  printf("GP_Input = 0x%08X\n", GP_Input);

  pSYS->PIOB_SODR = GP_Set;
  pSYS->PIOB_CODR = GP_Clear;
  pSYS->PIOB_OER  = GP_Set | GP_Clear; // Как выход
  pSYS->PIOB_ODR  = GP_Input;          // Как вход
  pSYS->PIOB_PER  = GP_Set | GP_Clear | GP_Input; // Разрешить переферию
  return 1;
}

//----------------------------------------------------------------------------
static void Usage( void ) {
  printf("\nusage: interface_segment interface pin1 pin2 pin3 pin4 res\n");
  printf("  interface: C(3), D(4)\n");
  printf("  Pins: 0 - output off(0v); 1 - output on(3.3v); 2 - input\n");
  printf("  Pins for RS485:   tx1 tx2 rx1 rx2: 0 - switch off, 1 - switch on \n");
  printf("  Pins for RS485_4: sg1 sg2 sg3 sg4: 0 - segment on, 1 - segment off \n");
  printf("  Pins for RS232: iRTS relay 2 DTR\n");
  printf("              iRTS:  inversion signal RTS. 0 - invert off, 1 - invert on\n");
  printf("              relay: 0 - relay close(on), 1 - relay open(off)\n");
  printf("              DTR : signal RS232. 0 - +12V, 1 - -12V\n");
  printf("  Pins for RS232_4: x1 x2 2 2:\n");
  printf("                0 0 : switch segment 1\n");
  printf("                1 0 : switch segment 2\n");
  printf("                0 1 : switch segment 3\n");
  printf("                1 1 : switch segment 4\n");
  printf("  res - power interface:\n");
  printf("    RS485:    1 - power on; 0 - power off\n");
  printf("    RS485_4:  1 - power on; 0 - power off\n");
  printf("    RS232:    1 - power on; 0 - power off\n");
  printf("    RS232_4:  1 - power off; 0 - power on\n");
}

//----------------------------------------------------------------------------
int main(int argc, char *argv[]) {
  //char buf[256];
  int  res, interface;
  int  o_tx1, o_tx2, o_rx1, o_rx2, o_res;

  if (argc != 7) { Usage(); return 1; }

  res = sscanf(argv[1],"%d",&interface);
  if (res != 1) { Usage(); return 1; }
  if ((interface < 3) || (interface > 4)) { Usage(); return 1; }

  res  = sscanf(argv[2],"%d",&o_tx1);
  res += sscanf(argv[3],"%d",&o_tx2);
  res += sscanf(argv[4],"%d",&o_rx1);
  res += sscanf(argv[5],"%d",&o_rx2);
  res += sscanf(argv[5],"%d",&o_res);

  if (res != 5) { Usage(); return 1; }

  gpio_init();
  Interface_Segment(interface, o_tx1, o_tx2, o_rx1, o_rx2, o_res);
  return 0;
}
